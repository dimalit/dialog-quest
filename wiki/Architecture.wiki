#summary Описание архитектуры с точки зрения программиста

=Многослойная архитектура системы=

Многослойная архитектура системы представлена на рисунке:
https://dialog-quest.googlecode.com/svn/wiki/general_arch.png

== C++ часть ==
C++ часть реализует всю платформенно-зависимую функциональность и предсавляет ее в единообразном виде - в виде нескольких фундаментальных Lua-классов (написаны на C++ и "забиндены" в Lua).

*А именно, это классы:*
 * ScreenItem - абстрактная "штуковина на экране". Характеризуется положением относительно родительского объекта (см. ниже), шириной и высотой. Помимо этого способна воспринимать нажатия события мышки и ввод с клавиатуры.
 * CompositeItem - разновидность ScreenItem, которая агрегирует в себе несколько других ScreenItem'ов, таскает их за собой по экрану, скопом всех удаляет (когда уничтожается сама).
 * SimpleItem - базовый "экранный элемент". Для своего отображения на экране требует впихивания ему внутрь объекта класса View.
 * View - абстрактная штуковина для отображения чего-нибудь на экране. Предназначена для запихивания внутрь SimpleItem'а, чтобы тот стал хоть как-то заметен пользователю.
*Разновидности View:*
 * Image - прямоугольная картинка, подгружаемая из файла.
 * Animation - покадровая анимация. С возможностью остановки и запуска, указания поведения в конце анимации (начать с начала, остановиться, воспроизвести в обратном направлении) и другими наворотами.
 * Texture - текстурированный прямоугольник. Хорош для создания фона и всяческих художественных рамок вокруг объектов (текстура в нем циклически повторяется).
 * Text - строка текста одним шрифтом.
 * TextBox - многострочный текст, вписанный в прямоугольник, с переносом строк и возможностью выравнивания, а также обтекания препятствий по краям.

*Также есть вспомогательне классы:*
 * Timer - "Разбудите меня через столько-то миллисекунд. При необходимости повторите".

== Базовая библиотека Lua ==
Базовая библиотека Lua находится в файле lib.lua и очень рекомендована к беглому ознакомлению: https://dialog-quest.googlecode.com/svn/ClassContainer/bin/lib.lua.
По сути, она делает минималистичные классы, реализованные в C++, более удобными.

*Например, в ней реализованы классы (Lua):*
 * ImageItem
 * AnimatedItem
 * TextItem
 * etc.
- которые сразу создают "Item" с некоторой картинкой внутри.
Также имеются более "продвинутые классы":
 * Mover - элемент, который можно таскать по экрану мышкой и ронять в DropArea'ю.
 * DropArea - область, которая притягивает к себе Mover'ы.
 * FlowLayout - составной элемент (сделан на основе CompositeItem), располагающий "засунутые" в него другие элементы сверху-вниз, справа-налево - с целью создания эффекта RichText'а - текста с меняющимися по ходу дела шрифтами, вставленными в него картинкам и другими элементыми.

== Все остальное, или вершина айсберга ==
Классы и прочая функциональность, которые реализованы в lib.lua, собственно, непосредственно предназначены для реализации с их помощью логики игровых сцен. Примером могут служить следующий файлы:
 * *scene.lua* - класс "сцена вообще". Помещает на экран заголовок сцены. Вызывается в последней строке lib.lua.
 * *scene_mosaic.lua* - класс "Mosaic" для реализции конкретного *типа* сцены - "мозайка". Вызывается в конце файла scene.lua.
 * *test_mosaic.lua* - собственно, пользовательский код. Вызывается из С++-ного кода после подгрузки всего вышеперечисленного. Содержит описание конкретных заданий и объектов, над которыми они должны выполняться.

== Диаграмма классов ==
Взаимодействие между основными из фундаментальных классов, которые С++ экспортирует в Lua, показано на рисунке:
https://dialog-quest.googlecode.com/svn/wiki/classes.png